{"ast":null,"code":"var _jsxFileName = \"/Users/eduardo/Desktop/newprojectGroceriesapp/Groceries-app/client/src/components/Expenses/Expenses.js\";\nimport React, { Fragment, Component } from \"react\";\nimport * as d3 from \"d3\";\nimport styles from \"./expenses.module.scss\";\n\nclass Expenses extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      charData: [],\n      dates: null\n    };\n\n    this.drawBarChartCompany = () => {\n      const charData = this.state.charData;\n      const dates = [{\n        month: \"January\",\n        value: 0\n      }, {\n        month: \"February\",\n        value: 0\n      }, {\n        month: \"March\",\n        value: 0\n      }, {\n        month: \"April\",\n        value: 0\n      }, {\n        month: \"May\",\n        value: 0\n      }, {\n        month: \"June\",\n        value: 0\n      }, {\n        month: \"July\",\n        value: 0\n      }, {\n        month: \"August\",\n        value: 0\n      }, {\n        month: \"September\",\n        value: 0\n      }, {\n        month: \"October\",\n        value: 0\n      }, {\n        month: \"November\",\n        value: 0\n      }, {\n        month: \"December\",\n        value: 0\n      }];\n      /** add all the values from charData(shoppingLists data)  & assign it to dates array to feed the graph*/\n\n      charData.map(el => {\n        return dates.map(element => {\n          if (element.month === el.month) {\n            const sumValues = [parseInt(el.value) + parseInt(element.value)];\n            const sum = sumValues.reduce((a, b) => {\n              return a + b;\n            }, 0);\n            return element.value = sum;\n          }\n\n          return element;\n        });\n      });\n      /** select div from ref, pass it as argument select from d3 library*/\n\n      const svg = d3.select(this.refs.canvas);\n      d3.select(\"#container\");\n      const margin = 60;\n      const width = 550;\n      const height = 200;\n      const chart = svg.append(\"g\").attr(\"transform\", \"translate(\".concat(margin, \", \").concat(margin, \")\"));\n      const xScale = d3.scaleBand().range([0, width]).domain(dates.map(element => element.month)).padding(0.0);\n      const yScale = d3.scaleLinear().range([height, 0]).domain([0, 1000]);\n      chart.append(\"g\").attr(\"transform\", \"translate(0, \".concat(height, \")\")).call(d3.axisBottom(xScale));\n      chart.append(\"g\").call(d3.axisLeft(yScale));\n      chart.selectAll().data(dates).enter().append(\"rect\").style(\"fill\", \"green\").attr(\"x\", el => xScale(el.month)).attr(\"y\", el => yScale(el.value)).attr(\"height\", el => height - yScale(el.value)).attr(\"width\", xScale.bandwidth());\n    };\n  }\n\n  async componentDidMount() {\n    const shoppingLists = this.props.shoppingLists;\n    await shoppingLists.map(element => {\n      return element.items.map(el => {\n        const dataChartValues = {\n          month: el.month,\n          value: el.price\n        };\n        return this.setState(prevState => ({\n          charData: [...prevState.charData, dataChartValues]\n        }));\n      });\n    });\n    this.drawBarChartCompany();\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.container,\n      id: \"svgContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      width: \"800\",\n      height: \"500\",\n      className: styles.svg,\n      ref: \"canvas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Expenses;","map":{"version":3,"sources":["/Users/eduardo/Desktop/newprojectGroceriesapp/Groceries-app/client/src/components/Expenses/Expenses.js"],"names":["React","Fragment","Component","d3","styles","Expenses","state","charData","dates","drawBarChartCompany","month","value","map","el","element","sumValues","parseInt","sum","reduce","a","b","svg","select","refs","canvas","margin","width","height","chart","append","attr","xScale","scaleBand","range","domain","padding","yScale","scaleLinear","call","axisBottom","axisLeft","selectAll","data","enter","style","bandwidth","componentDidMount","shoppingLists","props","items","dataChartValues","price","setState","prevState","render","container"],"mappings":"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","sourcesContent":["import React, { Fragment, Component } from \"react\";\nimport * as d3 from \"d3\";\n\nimport styles from \"./expenses.module.scss\";\n\nclass Expenses extends Component {\n   state = {\n      charData: [],\n      dates: null\n   };\n\n   async componentDidMount() {\n      const { shoppingLists } = this.props;\n      await shoppingLists.map(element => {\n         return element.items.map(el => {\n            const dataChartValues = { month: el.month, value: el.price };\n            return this.setState(prevState => ({ charData: [...prevState.charData, dataChartValues] }));\n         });\n      });\n      this.drawBarChartCompany();\n   }\n\n   drawBarChartCompany = () => {\n      const { charData } = this.state;\n\n      const dates = [\n         { month: \"January\", value: 0 },\n         { month: \"February\", value: 0 },\n         { month: \"March\", value: 0 },\n         { month: \"April\", value: 0 },\n         { month: \"May\", value: 0 },\n         { month: \"June\", value: 0 },\n         { month: \"July\", value: 0 },\n         { month: \"August\", value: 0 },\n         { month: \"September\", value: 0 },\n         { month: \"October\", value: 0 },\n         { month: \"November\", value: 0 },\n         { month: \"December\", value: 0 }\n      ];\n      /** add all the values from charData(shoppingLists data)  & assign it to dates array to feed the graph*/\n      charData.map(el => {\n         return dates.map(element => {\n            if (element.month === el.month) {\n               const sumValues = [parseInt(el.value) + parseInt(element.value)];\n               const sum = sumValues.reduce((a, b) => {\n                  return a + b;\n               }, 0);\n               return (element.value = sum);\n            }\n            return element;\n         });\n      });\n\n      /** select div from ref, pass it as argument select from d3 library*/\n      const svg = d3.select(this.refs.canvas);\n      d3.select(\"#container\");\n\n      const margin = 60;\n      const width = 550;\n      const height = 200;\n\n      const chart = svg.append(\"g\").attr(\"transform\", `translate(${margin}, ${margin})`);\n\n      const xScale = d3\n         .scaleBand()\n         .range([0, width])\n         .domain(dates.map(element => element.month))\n         .padding(0.0);\n\n      const yScale = d3\n         .scaleLinear()\n         .range([height, 0])\n         .domain([0, 1000]);\n\n      chart\n         .append(\"g\")\n         .attr(\"transform\", `translate(0, ${height})`)\n         .call(d3.axisBottom(xScale));\n\n      chart.append(\"g\").call(d3.axisLeft(yScale));\n\n      chart\n         .selectAll()\n         .data(dates)\n         .enter()\n         .append(\"rect\")\n         .style(\"fill\", \"green\")\n         .attr(\"x\", el => xScale(el.month))\n         .attr(\"y\", el => yScale(el.value))\n         .attr(\"height\", el => height - yScale(el.value))\n         .attr(\"width\", xScale.bandwidth());\n   };\n   render() {\n      return (\n         <Fragment>\n            <div className={styles.container} id='svgContainer'>\n               <svg width='800' height='500' className={styles.svg} ref={\"canvas\"} />\n            </div>\n         </Fragment>\n      );\n   }\n}\n\nexport default Expenses;"]},"metadata":{},"sourceType":"module"}