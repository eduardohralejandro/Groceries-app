{"ast":null,"code":"var _jsxFileName = \"/Users/eduardo/Desktop/newprojectGroceriesapp/Groceries-app/src/components/ListsLayout/ListsLayout.js\";\nimport React, { Fragment, Component } from \"react\";\nimport styles from \"./listsLayout.module.scss\";\nimport Items from \"../Items/Items\";\nimport CreateLists from \"../createLists/CreateLists\";\nimport AddItems from \"../AddItems/AddItems\";\n\nclass ListsLayout extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      groupTitle: \"\",\n      shoppingLists: [],\n      saveInfo: false,\n      displayComponent: \"list\",\n      newItems: [],\n      messageError: \"\",\n      showInputs: false,\n      bgColor: false\n    };\n\n    this.showInputsFunc = () => {\n      this.setState({\n        showInputs: true\n      });\n    };\n\n    this.bgColor = () => {\n      this.setState({\n        bgColor: true\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.saveShoppingList = items => {\n      const groupTitle = this.state.groupTitle;\n      const newList = {\n        title: groupTitle,\n        items\n      };\n\n      if (!groupTitle || items.length === 0) {\n        this.setState({\n          messageError: \"Please fill the required information\"\n        });\n        return;\n      } else {\n        this.setState(prevState => ({\n          shoppingLists: [...prevState.shoppingLists, newList],\n          newItems: items,\n          messageError: \"\",\n          groupTitle: \"\"\n        }));\n      }\n    };\n\n    this.saveProductInfo = (_, ID, price, person) => {\n      const date = new Date();\n      const month = date.toLocaleString(\"default\", {\n        month: \"long\"\n      });\n\n      if (!price || !person) {\n        this.setState({\n          messageError: \"Information required\"\n        });\n        return;\n      } else {\n        this.setState(prevState => ({\n          shoppingLists: prevState.shoppingLists.map((list, idList) => {\n            const newShopList = {\n              title: list.title,\n              items: list.items.map((item, keyItem) => {\n                const newKey = \"\".concat(idList, \"-\").concat(item.itemTitle, \"-\").concat(keyItem);\n\n                if (ID === newKey) {\n                  return {\n                    itemTitle: item.itemTitle,\n                    price,\n                    person,\n                    month,\n                    checkbox: item.checkbox\n                  };\n                }\n\n                return item;\n              })\n            };\n            return newShopList;\n          }),\n          messageError: \"\",\n          saveInfo: false\n        }));\n      }\n    };\n\n    this.handleCheckbox = (_, ID) => {\n      this.setState(prevState => ({\n        shoppingLists: prevState.shoppingLists.map((list, idList) => {\n          const newShopList = {\n            title: list.title,\n            items: list.items.map((item, key) => {\n              const newKey = \"\".concat(idList, \"-\").concat(item.itemTitle, \"-\").concat(key);\n\n              if (ID === newKey) {\n                return {\n                  itemTitle: item.itemTitle,\n                  price: item.checkbox ? \"\" : item.price,\n                  person: item.checkbox ? \"\" : item.person,\n                  month: item.month,\n                  checkbox: !item.checkbox\n                };\n              }\n\n              return item;\n            })\n          };\n          return newShopList;\n        }),\n        saveInfo: ID\n      }));\n    };\n\n    this.deleteList = ID => {\n      const shoppingLists = this.state.shoppingLists;\n      this.setState({\n        shoppingLists: shoppingLists.filter((_, keyList) => {\n          return keyList !== ID;\n        })\n      });\n    };\n\n    this.displayComponent = (type, ID) => {\n      if (type === \"list\") {\n        this.setState({\n          displayComponent: \"list\"\n        });\n      } else if (type === \"recipes\") {\n        this.setState({\n          displayComponent: \"recipes\"\n        });\n      } else if (type === \"expenses\") {\n        this.setState({\n          displayComponent: \"expenses\"\n        });\n      }\n\n      this.setState({\n        bgColor: ID\n      });\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const shoppingLists = this.state.shoppingLists;\n\n    if (prevState.shoppingLists !== shoppingLists) {\n      this.setState({\n        showInputs: false\n      });\n    } else if (prevState.displayComponent !== this.state.displayComponent) {\n      this.setState({\n        showInputs: false\n      });\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          messageError = _this$state.messageError,\n          items = _this$state.items,\n          newItems = _this$state.newItems,\n          shoppingLists = _this$state.shoppingLists,\n          saveInfo = _this$state.saveInfo,\n          itemTitle = _this$state.itemTitle,\n          showInputs = _this$state.showInputs,\n          bgColor = _this$state.bgColor;\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.btnsDisplayComponents,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"btnDisplayId\",\n      style: bgColor === 0 ? {\n        backgroundColor: \"#d4d2ff\",\n        borderBottom: \"3px solid #443bff\",\n        color: \"#443bff\"\n      } : null,\n      className: styles.btnDisplay,\n      onClick: () => this.displayComponent(\"list\", 0),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Your Lists\"), React.createElement(\"button\", {\n      id: \"btnDisplayId\",\n      style: bgColor === 1 ? {\n        backgroundColor: \"#d4d2ff\",\n        borderBottom: \"3px solid #443bff\",\n        color: \"#443bff\"\n      } : null,\n      className: styles.btnDisplay,\n      onClick: () => this.displayComponent(\"recipes\", 1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Recipes\"), React.createElement(\"button\", {\n      id: \"btnDisplayId\",\n      style: bgColor === 2 ? {\n        backgroundColor: \"#d4d2ff\",\n        borderBottom: \"3px solid #443bff\",\n        color: \"#443bff\"\n      } : null,\n      className: styles.btnDisplay,\n      onClick: () => this.displayComponent(\"expenses\", 2),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Expenses\")), React.createElement(\"div\", {\n      className: styles.errorMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, messageError)), React.createElement(CreateLists, {\n      saveShoppingList: this.saveShoppingList,\n      displayComponent: this.state.displayComponent,\n      shoppingLists: shoppingLists,\n      newItems: newItems,\n      handleChange: this.handleChange,\n      showInputsFunc: this.showInputsFunc,\n      showInputs: showInputs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(AddItems, {\n      addItems: this.addItems,\n      deleteItem: this.deleteItem,\n      items: items,\n      shoppingLists: shoppingLists,\n      saveShoppingList: this.saveShoppingList,\n      showInputs: showInputs,\n      handleChange: this.handleChange,\n      showInputsFunc: this.showInputsFunc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(Items, {\n      itemTitle: itemTitle,\n      saveProductInfo: this.saveProductInfo,\n      saveInfo: saveInfo,\n      handleCheckbox: this.handleCheckbox,\n      shoppingLists: shoppingLists,\n      newItemTitle: this.newItemTitle,\n      deleteList: this.deleteList,\n      showInputs: showInputs,\n      displayComponent: this.state.displayComponent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ListsLayout;","map":{"version":3,"sources":["/Users/eduardo/Desktop/newprojectGroceriesapp/Groceries-app/src/components/ListsLayout/ListsLayout.js"],"names":["React","Fragment","Component","styles","Items","CreateLists","AddItems","ListsLayout","state","groupTitle","shoppingLists","saveInfo","displayComponent","newItems","messageError","showInputs","bgColor","showInputsFunc","setState","handleChange","e","target","name","value","saveShoppingList","items","newList","title","length","prevState","saveProductInfo","_","ID","price","person","date","Date","month","toLocaleString","map","list","idList","newShopList","item","keyItem","newKey","itemTitle","checkbox","handleCheckbox","key","deleteList","filter","keyList","type","componentDidUpdate","prevProps","render","btnsDisplayComponents","backgroundColor","borderBottom","color","btnDisplay","errorMessage","addItems","deleteItem","newItemTitle"],"mappings":"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","sourcesContent":["import React, { Fragment, Component } from \"react\";\nimport styles from \"./listsLayout.module.scss\";\nimport Items from \"../Items/Items\";\nimport CreateLists from \"../createLists/CreateLists\";\nimport AddItems from \"../AddItems/AddItems\";\nclass ListsLayout extends Component {\n   state = {\n      groupTitle: \"\",\n      shoppingLists: [],\n      saveInfo: false,\n      displayComponent: \"list\",\n      newItems: [],\n      messageError: \"\",\n      showInputs: false,\n      bgColor: false\n   };\n\n   componentDidUpdate(prevProps, prevState) {\n      const { shoppingLists } = this.state;\n      if (prevState.shoppingLists !== shoppingLists) {\n         this.setState({ showInputs: false });\n      } else if (prevState.displayComponent !== this.state.displayComponent) {\n         this.setState({ showInputs: false });\n      }\n   }\n\n   showInputsFunc = () => {\n      this.setState({ showInputs: true });\n   };\n\n   bgColor = () => {\n      this.setState({ bgColor: true });\n   };\n\n   handleChange = e => {\n      this.setState({ [e.target.name]: e.target.value });\n   };\n\n   saveShoppingList = items => {\n      const { groupTitle } = this.state;\n      const newList = { title: groupTitle, items };\n\n      if (!groupTitle || items.length === 0) {\n         this.setState({ messageError: \"Please fill the required information\" });\n         return;\n      } else {\n         this.setState(prevState => ({\n            shoppingLists: [...prevState.shoppingLists, newList],\n            newItems: items,\n            messageError: \"\",\n            groupTitle: \"\"\n         }));\n      }\n   };\n\n   saveProductInfo = (_, ID, price, person) => {\n      const date = new Date();\n      const month = date.toLocaleString(\"default\", { month: \"long\" });\n      if (!price || !person) {\n         this.setState({ messageError: \"Information required\" });\n         return;\n      } else {\n         this.setState(prevState => ({\n            shoppingLists: prevState.shoppingLists.map((list, idList) => {\n               const newShopList = {\n                  title: list.title,\n                  items: list.items.map((item, keyItem) => {\n                     const newKey = `${idList}-${item.itemTitle}-${keyItem}`;\n                     if (ID === newKey) {\n                        return { itemTitle: item.itemTitle, price, person, month, checkbox: item.checkbox };\n                     }\n                     return item;\n                  })\n               };\n               return newShopList;\n            }),\n            messageError: \"\",\n            saveInfo: false\n         }));\n      }\n   };\n\n   handleCheckbox = (_, ID) => {\n      this.setState(prevState => ({\n         shoppingLists: prevState.shoppingLists.map((list, idList) => {\n            const newShopList = {\n               title: list.title,\n               items: list.items.map((item, key) => {\n                  const newKey = `${idList}-${item.itemTitle}-${key}`;\n                  if (ID === newKey) {\n                     return {\n                        itemTitle: item.itemTitle,\n                        price: item.checkbox ? \"\" : item.price,\n                        person: item.checkbox ? \"\" : item.person,\n                        month: item.month,\n                        checkbox: !item.checkbox\n                     };\n                  }\n                  return item;\n               })\n            };\n            return newShopList;\n         }),\n         saveInfo: ID\n      }));\n   };\n\n   deleteList = ID => {\n      const { shoppingLists } = this.state;\n      this.setState({\n         shoppingLists: shoppingLists.filter((_, keyList) => {\n            return keyList !== ID;\n         })\n      });\n   };\n\n   displayComponent = (type, ID) => {\n      if (type === \"list\") {\n         this.setState({ displayComponent: \"list\" });\n      } else if (type === \"recipes\") {\n         this.setState({ displayComponent: \"recipes\" });\n      } else if (type === \"expenses\") {\n         this.setState({ displayComponent: \"expenses\" });\n      }\n      this.setState({ bgColor: ID });\n   };\n\n   render() {\n      const { messageError, items, newItems, shoppingLists, saveInfo, itemTitle, showInputs, bgColor } = this.state;\n\n      return (\n         <Fragment>\n            <div className={styles.btnsDisplayComponents}>\n               <button\n                  id={\"btnDisplayId\"}\n                  style={bgColor === 0 ? { backgroundColor: \"#d4d2ff\", borderBottom: \"3px solid #443bff\", color: \"#443bff\" } : null}\n                  className={styles.btnDisplay}\n                  onClick={() => this.displayComponent(\"list\", 0)}>\n                  Your Lists\n               </button>\n               <button\n                  id={\"btnDisplayId\"}\n                  style={bgColor === 1 ? { backgroundColor: \"#d4d2ff\", borderBottom: \"3px solid #443bff\", color: \"#443bff\" } : null}\n                  className={styles.btnDisplay}\n                  onClick={() => this.displayComponent(\"recipes\", 1)}>\n                  Recipes\n               </button>\n               <button\n                  id={\"btnDisplayId\"}\n                  style={bgColor === 2 ? { backgroundColor: \"#d4d2ff\", borderBottom: \"3px solid #443bff\", color: \"#443bff\" } : null}\n                  className={styles.btnDisplay}\n                  onClick={() => this.displayComponent(\"expenses\", 2)}>\n                  Expenses\n               </button>\n            </div>\n\n            <div className={styles.errorMessage}>\n               <p>{messageError}</p>\n            </div>\n\n            <CreateLists\n               saveShoppingList={this.saveShoppingList}\n               displayComponent={this.state.displayComponent}\n               shoppingLists={shoppingLists}\n               newItems={newItems}\n               handleChange={this.handleChange}\n               showInputsFunc={this.showInputsFunc}\n               showInputs={showInputs}\n            />\n\n            <AddItems\n               addItems={this.addItems}\n               deleteItem={this.deleteItem}\n               items={items}\n               shoppingLists={shoppingLists}\n               saveShoppingList={this.saveShoppingList}\n               showInputs={showInputs}\n               handleChange={this.handleChange}\n               showInputsFunc={this.showInputsFunc}\n            />\n\n            <Items\n               itemTitle={itemTitle}\n               saveProductInfo={this.saveProductInfo}\n               saveInfo={saveInfo}\n               handleCheckbox={this.handleCheckbox}\n               shoppingLists={shoppingLists}\n               newItemTitle={this.newItemTitle}\n               deleteList={this.deleteList}\n               showInputs={showInputs}\n               displayComponent={this.state.displayComponent}\n            />\n         </Fragment>\n      );\n   }\n}\n\nexport default ListsLayout;\n"]},"metadata":{},"sourceType":"module"}